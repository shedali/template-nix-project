name: "CI"

on:
  pull_request:
  push:
    branches: [ main ]

# Cancel in-progress runs when new commit pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Each build is a separate job - runs in parallel
  build-react:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v4
    - uses: DeterminateSystems/magic-nix-cache-action@v2
    - name: Cache Nix store
      uses: actions/cache@v4
      with:
        path: /nix
        key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
        restore-keys: nix-store-${{ runner.os }}-
    - uses: cachix/cachix-action@v14
      with:
        name: shedali
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Build React App
      run: nix build .#react -L
    - name: Test output exists
      run: test -d ./result/www

  build-server:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v4
    - uses: DeterminateSystems/magic-nix-cache-action@v2
    - name: Cache Nix store
      uses: actions/cache@v4
      with:
        path: /nix
        key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
        restore-keys: nix-store-${{ runner.os }}-
    - uses: cachix/cachix-action@v14
      with:
        name: shedali
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Build Server
      run: nix build .#server -L
    - name: Test output exists
      run: test -f ./result/bin/bun-app

  build-script:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v4
    - uses: DeterminateSystems/magic-nix-cache-action@v2
    - name: Cache Nix store
      uses: actions/cache@v4
      with:
        path: /nix
        key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
        restore-keys: nix-store-${{ runner.os }}-
    - uses: cachix/cachix-action@v14
      with:
        name: shedali
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Build Script
      run: nix build .#script -L

  flake-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v4
    - uses: DeterminateSystems/magic-nix-cache-action@v2
    - name: Cache Nix store
      uses: actions/cache@v4
      with:
        path: /nix
        key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
        restore-keys: nix-store-${{ runner.os }}-
    - name: Check flake
      run: nix flake check

  devshell-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v4
    - uses: DeterminateSystems/magic-nix-cache-action@v2
    - name: Cache Nix store
      uses: actions/cache@v4
      with:
        path: /nix
        key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
        restore-keys: nix-store-${{ runner.os }}-
    - name: Test dev shell
      run: |
        nix develop --command bun --version
        nix develop --command which nixpkgs-fmt

  format-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v4
    - name: Cache Nix store
      uses: actions/cache@v4
      with:
        path: /nix
        key: nix-store-${{ runner.os }}-${{ hashFiles('flake.lock') }}
        restore-keys: nix-store-${{ runner.os }}-
    - name: Check formatting
      run: |
        nix fmt
        git diff --exit-code || (echo "Nix files need formatting. Run 'nix fmt'" && exit 1)

  # Single status check for branch protection
  all-checks:
    if: always()
    needs: 
      - build-react
      - build-server
      - build-script
      - flake-check
      - devshell-test
      - format-check
    runs-on: ubuntu-latest
    steps:
    - name: Verify all checks passed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}