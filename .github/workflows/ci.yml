name: "CI"

on:
  pull_request:
  push:
    branches: [ main ]
  schedule:
    # Weekly macOS validation (Sundays at 6 AM UTC)
    - cron: '0 6 * * 0'

# Cancel in-progress runs when new commit pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check what files changed to determine if we need full builds
  changes:
    runs-on: ubuntu-latest
    outputs:
      docs-only: ${{ steps.changes.outputs.docs-only }}
      source-changed: ${{ steps.changes.outputs.source-changed }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          docs-only:
            - 'docs/**'
            - 'README.md'
            - '*.md'
          source-changed:
            - '**'
            - '!docs/**'
            - '!README.md'
            - '!*.md'

  # Fast path for docs-only changes
  docs-check:
    needs: changes
    if: needs.changes.outputs.docs-only == 'true' && needs.changes.outputs.source-changed != 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Docs-only change detected
      run: |
        echo "‚úÖ Documentation-only change detected"
        echo "‚ö° Skipping builds - no source code changes"
        echo "üìù Changed files affect only documentation"

  # Consolidated build job - everything in one place
  build-and-test:
    needs: changes
    if: needs.changes.outputs.source-changed == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest]  # Only test on Linux for speed, add macOS later if needed
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v4
      with:
        extra-conf: |
          extra-substituters = https://cache.nixos.org https://shedali.cachix.org
          extra-trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= shedali.cachix.org-1:jnKOvnLAPbsv127ddEfluQ5Wo8h7llUT47CUJCumAvI=
          max-jobs = auto
          cores = 0
    - name: Cache Nix store paths
      uses: actions/cache@v4
      id: nix-cache
      with:
        path: |
          ~/.cache/nix
          /nix/var/nix/profiles
          /nix/var/nix/gcroots
        key: nix-${{ runner.os }}-${{ hashFiles('flake.lock', '**/*.nix') }}
        restore-keys: |
          nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          nix-${{ runner.os }}-
    - name: Cache performance info
      run: |
        if [[ "${{ steps.nix-cache.outputs.cache-hit }}" == "true" ]]; then
          echo "‚ö° Nix cache hit - build should be fast"
        else
          echo "üõ†Ô∏è  Nix cache miss - first build may take longer"
        fi
    
    - uses: cachix/cachix-action@v14
      with:
        name: shedali
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    # Pre-populate actual dependencies for better cache warming
    - name: Pre-populate Nix store
      run: |
        echo "Pre-building actual dependencies..."
        nix build nixpkgs#bun --no-link
        nix build nixpkgs#nodejs --no-link
        nix develop --command echo "Dev shell ready"
    
    # All builds and tests in sequence (but same job)
    - name: Check formatting
      run: |
        nix fmt
        git diff --exit-code || (echo "Nix files need formatting. Run 'nix fmt'" && exit 1)
    
    - name: Check flake
      run: nix flake check
    
    - name: Build all targets
      run: |
        build_start=$(date +%s)
        
        echo "Building React app..."
        react_start=$(date +%s)
        nix build .#react -L
        test -d ./result/www
        react_time=$(($(date +%s) - react_start))
        echo "‚úÖ React build completed in ${react_time}s"
        
        echo "Building script..."
        script_start=$(date +%s)
        nix build .#script -L
        script_time=$(($(date +%s) - script_start))
        echo "‚úÖ Script build completed in ${script_time}s"
        
        total_time=$(($(date +%s) - build_start))
        echo "üéØ Total build time: ${total_time}s"
    
    - name: Test dev shell
      run: |
        nix develop --command bun --version
        nix develop --command which nixpkgs-fmt

  # macOS validation only on releases and weekly schedule to save CI time
  macos-validation:
    needs: [changes, build-and-test]
    if: |
      needs.changes.outputs.source-changed == 'true' && (
        github.event_name == 'release' ||
        (github.ref == 'refs/heads/main' && github.event_name == 'schedule')
      )
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - uses: DeterminateSystems/nix-installer-action@v4
      with:
        extra-conf: |
          extra-substituters = https://cache.nixos.org https://shedali.cachix.org
          extra-trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= shedali.cachix.org-1:jnKOvnLAPbsv127ddEfluQ5Wo8h7llUT47CUJCumAvI=
          max-jobs = auto
          cores = 0
    - name: Cache Nix store paths
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/nix
          /nix/var/nix/profiles
          /nix/var/nix/gcroots
        key: nix-${{ runner.os }}-${{ hashFiles('flake.lock', '**/*.nix') }}
        restore-keys: |
          nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}
          nix-${{ runner.os }}-
    - uses: cachix/cachix-action@v14
      with:
        name: shedali
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Quick build test on macOS
      run: nix build .#react -L

  # Single status check for branch protection
  all-checks:
    if: always()
    needs: 
      - changes
      - docs-check
      - build-and-test
      - macos-validation
    runs-on: ubuntu-latest
    steps:
    - name: Check results
      run: |
        echo "Changes job: ${{ needs.changes.result }}"
        echo "Docs check: ${{ needs.docs-check.result }}"
        echo "Build and test: ${{ needs.build-and-test.result }}"
        echo "macOS validation: ${{ needs.macos-validation.result }}"
        
        # Enhanced validation logic
        success_count=0
        
        # Check for successful completion paths
        if [[ "${{ needs.docs-check.result }}" == "success" ]]; then
          echo "‚úÖ Docs-only path completed successfully"
          success_count=$((success_count + 1))
        fi
        
        if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
          echo "‚úÖ Build path completed successfully"
          success_count=$((success_count + 1))
        fi
        
        # macOS validation is optional and doesn't block
        if [[ "${{ needs.macos-validation.result }}" == "success" ]]; then
          echo "‚úÖ macOS validation passed"
        elif [[ "${{ needs.macos-validation.result }}" == "skipped" ]]; then
          echo "‚è≠Ô∏è  macOS validation skipped (scheduled runs only)"
        fi
        
        if [[ $success_count -gt 0 ]]; then
          echo "‚úÖ CI completed successfully ($success_count successful paths)"
          exit 0
        else
          echo "‚ùå No successful completion path found"
          exit 1
        fi