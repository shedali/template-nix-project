name: CI Performance Monitor

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  schedule:
    # Run daily at 6 AM UTC to collect performance data
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  monitor-performance:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'cancelled'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Collect CI Performance Data
      id: collect-data
      run: |
        echo "🔍 Collecting CI performance data..."
        
        # Get recent workflow runs
        gh run list --workflow=ci.yml --limit=10 --json number,conclusion,createdAt,updatedAt,displayTitle > runs.json
        
        # Calculate timing data
        node -e "
        const runs = JSON.parse(require('fs').readFileSync('runs.json', 'utf8'));
        const timings = runs
          .filter(run => run.conclusion === 'success')
          .map(run => ({
            id: run.number,
            title: run.displayTitle,
            duration: Math.round((new Date(run.updatedAt) - new Date(run.createdAt)) / 1000),
            date: run.createdAt.split('T')[0]
          }))
          .sort((a, b) => b.duration - a.duration);
          
        console.log('## CI Performance Report');
        console.log('');
        console.log('| Run | Duration | Commit |');
        console.log('|-----|----------|--------|');
        timings.forEach(t => {
          const status = t.duration > 300 ? '⚠️' : t.duration > 200 ? '⏰' : '✅';
          console.log(\`| \${status} [\${t.id}](https://github.com/\${{ github.repository }}/actions/runs/\${t.id}) | \${t.duration}s | \${t.title.substring(0, 50)} |\`);
        });
        
        const avgDuration = Math.round(timings.reduce((sum, t) => sum + t.duration, 0) / timings.length);
        const maxDuration = Math.max(...timings.map(t => t.duration));
        const minDuration = Math.min(...timings.map(t => t.duration));
        
        console.log('');
        console.log(\`**Average Duration:** \${avgDuration}s\`);
        console.log(\`**Range:** \${minDuration}s - \${maxDuration}s\`);
        
        // Set outputs for alerting
        echo \"avg_duration=\${avgDuration}\" >> \$GITHUB_OUTPUT
        echo \"max_duration=\${maxDuration}\" >> \$GITHUB_OUTPUT
        echo \"latest_duration=\${timings[0]?.duration || 0}\" >> \$GITHUB_OUTPUT
        " >> $GITHUB_STEP_SUMMARY
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Check for Performance Regression
      if: steps.collect-data.outputs.latest_duration > 240
      run: |
        echo "⚠️ CI Performance Alert!"
        echo "Latest build took ${{ steps.collect-data.outputs.latest_duration }}s"
        echo "This exceeds the 4-minute threshold."
        echo ""
        echo "Consider investigating:"
        echo "- Cache hit rates"
        echo "- Network dependencies"
        echo "- Build complexity changes"
        exit 1
        
    - name: Update Performance Badge
      run: |
        # Create a simple performance badge data
        avg_duration="${{ steps.collect-data.outputs.avg_duration }}"
        color="green"
        
        if [ "$avg_duration" -gt 300 ]; then
          color="red"
        elif [ "$avg_duration" -gt 180 ]; then
          color="yellow"
        fi
        
        echo "CI_DURATION=${avg_duration}s" > perf-badge.txt
        echo "CI_COLOR=${color}" >> perf-badge.txt
        
    - name: Commit Performance Data
      run: |
        if [ -f perf-badge.txt ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Only commit if there are changes
          if ! git diff --quiet perf-badge.txt 2>/dev/null; then
            git add perf-badge.txt
            git commit -m "chore: update CI performance metrics

Average CI duration: ${{ steps.collect-data.outputs.avg_duration }}s
Latest run: ${{ steps.collect-data.outputs.latest_duration }}s

🤖 Generated with Claude Code" || exit 0
            git push || exit 0
          fi
        fi
      env:
        GH_TOKEN: ${{ github.token }}